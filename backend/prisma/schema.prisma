generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Book {
    id          String        @id // Use the filename as the unique ID
    title       String
    chapters    Chapter[]
    profiles    Profile[]
    passages    Passage[]
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    Description Description[]
}

model Chapter {
    id       Int       @id @default(autoincrement())
    order    Int
    title    String
    contents Json
    book     Book      @relation(fields: [bookId], references: [id])
    bookId   String
    passages Passage[] // Relation to Passage
}

model Passage {
    id           Int           @id @default(autoincrement())
    textContent  String
    order        Int
    book         Book          @relation(fields: [bookId], references: [id])
    bookId       String
    chapter      Chapter       @relation(fields: [chapterId], references: [id])
    chapterId    Int
    descriptions Description[]
    profiles     Profile[]     @relation("PassageProfiles") // Implicit many-to-many
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt

    @@index([chapterId, order]) // Add an index for faster queries based on chapter and order
}

model Profile {
    id           Int           @id @default(autoincrement())
    name         String
    type         String
    descriptions Description[] // A profile has multiple descriptions
    book         Book          @relation(fields: [bookId], references: [id])
    bookId       String
    passages     Passage[]     @relation("PassageProfiles") // Implicit many-to-many
    aiModels     AiModel[]     @relation("ProfileAiModels") // Many-to-Many Relation

    @@unique([name, bookId]) // Ensure profiles are unique for each book
}

model Description {
    id        Int     @id @default(autoincrement())
    bookId    String
    book      Book    @relation(fields: [bookId], references: [id])
    text      String
    profile   Profile @relation(fields: [profileId], references: [id])
    profileId Int
    passage   Passage @relation(fields: [passageId], references: [id])
    passageId Int
}

model AiModel {
    id          Int      @id @default(autoincrement())
    modelId     Int      @unique // The ID from CivitAI
    name        String
    fileName    String
    type        String
    description String?
    images      Json?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    profiles Profile[] @relation("ProfileAiModels") // Many-to-Many Relation
}
