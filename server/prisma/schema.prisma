generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Book {
    id           String        @id
    title        String
    chapters     Chapter[]
    profiles     Profile[]
    passages     Passage[]
    scenes       Scene[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    descriptions Description[]
}

model Chapter {
    id       Int       @id @default(autoincrement())
    order    Int
    title    String
    book     Book      @relation(fields: [bookId], references: [id])
    bookId   String
    passages Passage[]
}

model Passage {
    id           Int           @id @default(autoincrement())
    textContent  String
    order        Int
    book         Book          @relation(fields: [bookId], references: [id])
    bookId       String
    chapter      Chapter       @relation(fields: [chapterId], references: [id])
    chapterId    Int
    descriptions Description[]
    profiles     Profile[]     @relation("PassageProfiles")
    scene        Scene?        @relation(fields: [sceneId], references: [id])
    sceneId      Int?
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt

    @@index([chapterId, order])
}

model Profile {
    id           Int              @id @default(autoincrement())
    name         String
    type         String
    imageUrl     String?
    descriptions Description[]
    book         Book             @relation(fields: [bookId], references: [id])
    bookId       String
    passages     Passage[]        @relation("PassageProfiles")
    aiModels     ProfileAiModel[]
    imageId      Int?
    image        ModelImage?      @relation(fields: [imageId], references: [id])
    aliases      Alias[] // Relation to Alias
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt

    @@unique([name, bookId])
}

model Alias {
    id        Int     @id @default(autoincrement())
    name      String
    profile   Profile @relation(fields: [profileId], references: [id])
    profileId Int

    @@unique([name, profileId])
}

model Description {
    id        Int     @id @default(autoincrement())
    bookId    String
    book      Book    @relation(fields: [bookId], references: [id])
    text      String
    profile   Profile @relation(fields: [profileId], references: [id])
    profileId Int
    passage   Passage @relation(fields: [passageId], references: [id])
    passageId Int
}

model AiModel {
    id              Int               @id @default(autoincrement())
    modelId         Int               @unique
    name            String
    fileName        String
    type            String
    baseModel       String
    baseModelType   String?
    description     String?
    images          ModelImage[]
    profiles        ProfileAiModel[]
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    CivitaiResource CivitaiResource[]
}

model ModelImage {
    id             Int             @id
    url            String
    model          AiModel         @relation(fields: [modelId], references: [id])
    modelId        Int
    nsfwLevel      Int
    width          Int
    height         Int
    hash           String
    type           String
    hasMeta        Boolean
    onSite         Boolean
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    generationData GenerationData?
    Profile        Profile[]
}

model GenerationData {
    id                  Int               @id @default(autoincrement())
    passageBackgroundId Int?              @unique
    sceneBackgroundId   Int?              @unique
    prompt              String
    steps               Int
    cfgScale            Float
    negativePrompt      String?
    sampler             String?
    seed                Int?
    size                String?
    createdDate         DateTime          @default(now())
    clipSkip            Int?
    civitaiResources    CivitaiResource[]
    modelImage          ModelImage?       @relation(fields: [modelImageId], references: [id])
    modelImageId        Int?              @unique
}

model CivitaiResource {
    id               Int            @id @default(autoincrement())
    generationData   GenerationData @relation(fields: [generationDataId], references: [id])
    generationDataId Int
    strength         Float?
    model            AiModel        @relation(fields: [modelId], references: [id])
    modelId          Int
    modelName        String
    modelType        String
    versionId        Int
    versionName      String
    baseModel        String
}

model ProfileAiModel {
    profile   Profile @relation(fields: [profileId], references: [id])
    profileId Int
    aiModel   AiModel @relation(fields: [aiModelId], references: [id])
    aiModelId Int

    @@id([profileId, aiModelId])
}

model Scene {
    id        Int       @id @default(autoincrement())
    order     Int
    book      Book      @relation(fields: [bookId], references: [id])
    bookId    String
    passages  Passage[]
    imageUrl  String? // Optional: URL to the generated background image
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}
