generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Book {
    id                     Int                      @id @default(autoincrement())
    title                  String
    processed              Boolean                  @default(false)
    storageUrl             String
    coverUrl               String?
    userId                 String
    chapters               Chapter[]
    profiles               Profile[]
    passages               Passage[]
    scenes                 Scene[]
    createdAt              DateTime                 @default(now())
    updatedAt              DateTime                 @updatedAt
    descriptions           Description[]
    ReadingProgress        ReadingProgress[]
    ProcessingJob          ProcessingJob[]
    ImageGenerationPackage ImageGenerationPackage[]
}

model Chapter {
    id              Int               @id @default(autoincrement())
    order           Int
    title           String
    book            Book              @relation(fields: [bookId], references: [id])
    bookId          Int
    processed       Boolean           @default(false)
    speechProcessed Boolean           @default(false)
    passages        Passage[]
    scenes          Scene[]
    ReadingProgress ReadingProgress[]
    ProcessingJob   ProcessingJob[]
}

model Passage {
    id           Int           @id @default(autoincrement())
    textContent  String
    order        Int
    book         Book          @relation(fields: [bookId], references: [id])
    bookId       Int
    chapter      Chapter       @relation(fields: [chapterId], references: [id])
    chapterId    Int
    descriptions Description[]
    profiles     Profile[]     @relation("PassageProfiles")
    speakerId    Int?
    speaker      Profile?      @relation("PassageSpeaker", fields: [speakerId], references: [id])
    scene        Scene?        @relation(fields: [sceneId], references: [id])
    sceneId      Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Profile   Profile? @relation(fields: [profileId], references: [id])
    profileId Int?

    @@index([chapterId, order])
}

model Profile {
    id              Int                   @id @default(autoincrement())
    name            String
    type            String?
    imageUrl        String?
    gender          String?
    descriptions    Description[]
    book            Book                  @relation(fields: [bookId], references: [id])
    bookId          Int
    passages        Passage[]             @relation("PassageProfiles")
    aiModels        ProfileAiModel[]
    imageId         Int?
    image           ModelImage?           @relation(fields: [imageId], references: [id])
    aliases         Alias[]
    createdAt       DateTime              @default(now())
    updatedAt       DateTime              @updatedAt
    imagePackages   ProfileImagePackage[]
    Passage         Passage[]
    speakerPassages Passage[]             @relation("PassageSpeaker")

    @@unique([name, bookId])
}

model Alias {
    id        Int     @id @default(autoincrement())
    name      String
    profile   Profile @relation(fields: [profileId], references: [id])
    profileId Int

    @@unique([name, profileId])
}

model Description {
    id         Int     @id @default(autoincrement())
    bookId     Int
    book       Book    @relation(fields: [bookId], references: [id])
    text       String
    appearance String?
    type       String?
    profile    Profile @relation(fields: [profileId], references: [id])
    profileId  Int
    passage    Passage @relation(fields: [passageId], references: [id])
    passageId  Int
}

model AiModel {
    id              Int               @id @default(autoincrement())
    modelId         Int               @unique
    name            String
    fileName        String
    type            String
    baseModel       String
    baseModelType   String?
    description     String?
    images          ModelImage[]
    profiles        ProfileAiModel[]
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    CivitaiResource CivitaiResource[]
}

model ModelImage {
    id             Int             @id @default(autoincrement())
    url            String
    civitaiImageId Int?            @unique
    model          AiModel         @relation(fields: [modelId], references: [id])
    modelId        Int
    nsfwLevel      Int
    width          Int
    height         Int
    hash           String
    type           String
    hasMeta        Boolean
    onSite         Boolean
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    generationData GenerationData?
    Profile        Profile[]
}

model GenerationData {
    id                  Int               @id @default(autoincrement())
    passageBackgroundId Int?              @unique
    sceneBackgroundId   Int?              @unique
    prompt              String
    steps               Int
    cfgScale            Float
    negativePrompt      String?
    sampler             String?
    seed                Int?
    size                String?
    createdDate         DateTime          @default(now())
    clipSkip            Int?
    civitaiResources    CivitaiResource[]
    modelImage          ModelImage?       @relation(fields: [modelImageId], references: [id])
    modelImageId        Int?              @unique
}

model CivitaiResource {
    id               Int            @id @default(autoincrement())
    generationData   GenerationData @relation(fields: [generationDataId], references: [id])
    generationDataId Int
    strength         Float?
    model            AiModel        @relation(fields: [modelId], references: [id])
    modelId          Int
    modelName        String
    modelType        String
    versionId        Int
    versionName      String
    baseModel        String
}

model ProfileAiModel {
    profile   Profile @relation(fields: [profileId], references: [id])
    profileId Int
    aiModel   AiModel @relation(fields: [aiModelId], references: [id])
    aiModelId Int

    @@id([profileId, aiModelId])
}

model Scene {
    id            Int                 @id @default(autoincrement())
    order         Int
    book          Book                @relation(fields: [bookId], references: [id])
    bookId        Int
    chapter       Chapter?            @relation(fields: [chapterId], references: [id])
    chapterId     Int?
    passages      Passage[]
    imageUrl      String?
    createdAt     DateTime            @default(now())
    updatedAt     DateTime            @updatedAt
    imagePackages SceneImagePackage[]
}

model ProcessingJob {
    id             Int       @id @default(autoincrement())
    jobType        String // 'book', 'chapter', etc.
    bookId         Int
    chapterId      Int?
    phase          String
    status         String    @default("pending") // 'pending', 'in_progress', 'completed', 'failed'
    totalTasks     Int       @default(0)
    completedTasks Int       @default(0)
    failedTasks    Int       @default(0)
    progress       Float     @default(0.0)
    startTime      DateTime
    endTime        DateTime?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    errorMessage   String?

    // Relations
    book    Book?    @relation(fields: [bookId], references: [id])
    chapter Chapter? @relation(fields: [chapterId], references: [id])
}

model ReadingProgress {
    id           Int    @id @default(autoincrement())
    userId       String
    bookId       Int
    chapterId    Int
    passageIndex Int

    user    User    @relation(fields: [userId], references: [id])
    book    Book    @relation(fields: [bookId], references: [id])
    chapter Chapter @relation(fields: [chapterId], references: [id])

    @@unique([userId, bookId], name: "userId_bookId")
}

model User {
    id              String            @id
    readingProgress ReadingProgress[]
    roles           String?
    credits         Int               @default(0)
    UserSettings    UserSettings?
}

model UserSettings {
    id             Int     @id @default(autoincrement())
    autoPlay       Boolean @default(true)
    wpm            Int     @default(200)
    passageSpeaker Boolean @default(true)

    userId String @unique
    user   User   @relation(fields: [userId], references: [id])
}

model ImageGenerationPackage {
    id                  Int                   @id @default(autoincrement())
    name                String
    book                Book                  @relation(fields: [bookId], references: [id])
    bookId              Int
    prompt              String
    negative_prompt     String?
    steps               Int?
    width               Int?
    height              Int?
    model               String
    removeBackground    Boolean               @default(false)
    positiveLoras       PositiveLora[]
    embeddings          Embedding[]
    negativeEmbeddings  NegativeEmbedding[]
    profileAssociations ProfileImagePackage[]
    sceneAssociations   SceneImagePackage[]
    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @updatedAt
}

model PositiveLora {
    id                     Int                    @id @default(autoincrement())
    name                   String
    weight                 Float
    imageGenerationPackage ImageGenerationPackage @relation(fields: [packageId], references: [id])
    packageId              Int
}

model Embedding {
    id                     Int                    @id @default(autoincrement())
    name                   String
    imageGenerationPackage ImageGenerationPackage @relation(fields: [packageId], references: [id])
    packageId              Int
}

model NegativeEmbedding {
    id                     Int                    @id @default(autoincrement())
    name                   String
    imageGenerationPackage ImageGenerationPackage @relation(fields: [packageId], references: [id])
    packageId              Int
}

model ProfileImagePackage {
    profileId Int
    packageId Int
    profile   Profile                @relation(fields: [profileId], references: [id])
    package   ImageGenerationPackage @relation(fields: [packageId], references: [id])

    @@id([profileId, packageId])
}

model SceneImagePackage {
    sceneId   Int
    packageId Int
    scene     Scene                  @relation(fields: [sceneId], references: [id])
    package   ImageGenerationPackage @relation(fields: [packageId], references: [id])

    @@id([sceneId, packageId])
}
